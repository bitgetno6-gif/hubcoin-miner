const express = require('express');
const cors = require('cors');
const admin = require('firebase-admin');
const { Telegraf, Markup } = require('telegraf');
const path =require('path');
require('dotenv').config();

// --- 1. ‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ‡¶è‡¶¨‡¶Ç ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ---
const app = express();
const PORT = process.env.PORT || 10000;

// ‡¶è‡¶®‡¶≠‡¶æ‡ßü‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßá‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const FRONTEND_URL = process.env.FRONTEND_URL;
const FIREBASE_CONFIG_STRING = process.env.FIREBASE_SERVICE_ACCOUNT_JSON_STRING;
const ADMIN_TELEGRAM_ID = parseInt(process.env.ADMIN_TELEGRAM_ID || '0', 10);

// ‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶≠‡ßá‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ
if (!BOT_TOKEN || !FRONTEND_URL || !FIREBASE_CONFIG_STRING) {
    console.error("‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶è‡¶®‡¶≠‡¶æ‡ßü‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßá‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ (BOT_TOKEN, FRONTEND_URL, FIREBASE_CONFIG_STRING) ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶®‡ßá‡¶á!");
    process.exit(1); // ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ
}

// Firebase ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
try {
    const serviceAccount = JSON.parse(FIREBASE_CONFIG_STRING);

    // üî• --- START: Firebase private key ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® --- üî•
    // Render-‡¶è‡¶∞ ‡¶è‡¶®‡¶≠‡¶æ‡ßü‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßá‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤‡ßá private key-‡¶è‡¶∞ newline (\n) ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞‡¶ó‡ßÅ‡¶≤‡ßã ‡¶†‡¶ø‡¶ï‡¶Æ‡¶§‡ßã ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶á ‡¶≤‡¶æ‡¶á‡¶®‡¶ü‡¶ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§
    serviceAccount.private_key = serviceAccount.private_key.replace(/\\n/g, '\n');
    // üî• --- END: Firebase private key ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® --- üî•

    admin.initializeApp({
        credential: admin.credential.cert(serviceAccount)
    });
    const db = admin.firestore();
    console.log("Firebase ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤‡¶æ‡¶á‡¶ú ‡¶π‡ßü‡ßá‡¶õ‡ßá!");

    // --- ‡¶Æ‡¶ø‡¶°‡¶≤‡¶ì‡ßü‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ---
    app.use(cors({ origin: [FRONTEND_URL, 'https://web.telegram.org'] }));
    app.use(express.json());
    // 'static' ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶´‡ßç‡¶∞‡¶®‡ßç‡¶ü‡¶è‡¶®‡ßç‡¶° ‡¶´‡¶æ‡¶á‡¶≤‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
    app.use(express.static(path.join(__dirname, 'static')));

    // --- Helper Functions (‡¶∏‡¶π‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®) ---
    const getUserRef = (userId) => db.collection('users').doc(String(userId));

    const createNewUser = async (userId, username, referrerId = null) => {
        const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü
        const userData = {
            username: username, balance: 0.0, gems: 0, unclaimedGems: 0,
            refs: 0, adWatch: 0, todayIncome: 0.0, gemsClaimedToday: 0,
            lastGemClaimDate: today, totalWithdrawn: 0.0,
            referredBy: referrerId
        };
        await getUserRef(userId).set(userData);
        console.log(`‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡ßü‡ßá‡¶õ‡ßá: ${userId}, ‡¶∞‡ßá‡¶´‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®: ${referrerId}`);
        return userData;
    };

    // --- API Endpoints ---
    app.post("/api/user", async (req, res) => {
        const { user_id, username } = req.body;
        if (!user_id) return res.status(400).json({ error: "User ID ‡¶®‡ßá‡¶á" });

        try {
            const userDoc = await getUserRef(user_id).get();
            if (userDoc.exists) {
                return res.status(200).json(userDoc.data());
            } else {
                const newUser = await createNewUser(user_id, username || 'N/A');
                return res.status(201).json(newUser);
            }
        } catch (error) {
            console.error("API Error on /api/user:", error);
            return res.status(500).json({ error: "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶è‡¶∞‡¶∞" });
        }
    });

    app.post("/api/claim-gems", async (req, res) => {
        const { user_id } = req.body;
        if (!user_id) return res.status(400).json({ error: "User ID ‡¶®‡ßá‡¶á" });
        
        try {
            const userRef = getUserRef(user_id);
            const result = await db.runTransaction(async (t) => {
                const doc = await t.get(userRef);
                if (!doc.exists) return { success: false, message: "‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§" };

                const data = doc.data();
                const todayStr = new Date().toISOString().split('T')[0];
                let gemsClaimedToday = data.gemsClaimedToday || 0;

                if (data.unclaimedGems < 2) {
                    return { success: false, message: "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßç‡¶§‡¶§ ‡ß®‡¶ü‡¶ø ‡¶ú‡ßá‡¶Æ ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡•§" };
                }
                
                if (data.lastGemClaimDate !== todayStr) {
                    gemsClaimedToday = 0;
                    t.update(userRef, { lastGemClaimDate: todayStr, gemsClaimedToday: 0 });
                }

                if (gemsClaimedToday >= 6) {
                    return { success: false, message: "‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶ú‡ßá‡¶Æ ‡¶ï‡ßç‡¶≤‡ßá‡¶Æ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ‡¶∂‡ßá‡¶∑ (‡ß¨/‡¶¶‡¶ø‡¶®)‡•§" };
                }

                t.update(userRef, {
                    gems: admin.firestore.FieldValue.increment(2),
                    unclaimedGems: admin.firestore.FieldValue.increment(-2),
                    gemsClaimedToday: admin.firestore.FieldValue.increment(2)
                });
                
                return { 
                    success: true, 
                    message: "‡ß®‡¶ü‡¶ø ‡¶ú‡ßá‡¶Æ ‡¶ï‡ßç‡¶≤‡ßá‡¶Æ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!",
                    data: { gems: data.gems + 2, unclaimedGems: data.unclaimedGems - 2 }
                };
            });
            return res.status(200).json(result);
        } catch (error) {
            console.error("API Error on /api/claim-gems:", error);
            return res.status(500).json({ error: "‡¶ú‡ßá‡¶Æ ‡¶ï‡ßç‡¶≤‡ßá‡¶Æ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø" });
        }
    });

    app.post('/api/withdrawal', async (req, res) => {
        const { user_id, amount, method, account } = req.body;
        if (!user_id || !amount || !method || !account) {
            return res.status(400).json({ error: '‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü ‡¶§‡¶•‡ßç‡¶Ø ‡¶®‡ßá‡¶á' });
        }

        let required_gems = 0;
        // ... (‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ú‡ßá‡¶Æ‡ßá‡¶∞ ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®) ...

        try {
            const userRef = getUserRef(user_id);
            const result = await db.runTransaction(async t => {
                const doc = await t.get(userRef);
                if (!doc.exists) return { success: false, error: "‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§" };
                
                const data = doc.data();
                if (data.balance < amount) return { success: false, error: "‡¶Ö‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏‡•§" };
                if (data.gems < required_gems) return { success: false, error: `‡¶Ö‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶ú‡ßá‡¶Æ‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ${required_gems} ‡¶ú‡ßá‡¶Æ ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡•§` };

                t.update(userRef, {
                    balance: admin.firestore.FieldValue.increment(-amount),
                    gems: admin.firestore.FieldValue.increment(-required_gems)
                });
                
                const withdrawalRef = db.collection('withdrawals').doc();
                t.set(withdrawalRef, {
                    userId: user_id, amount, method, account,
                    status: 'pending', timestamp: admin.firestore.FieldValue.serverTimestamp()
                });
                
                return { 
                    success: true, 
                    message: "‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞‡ßü‡¶æ‡¶≤ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ú‡¶Æ‡¶æ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!",
                    data: { balance: data.balance - amount, gems: data.gems - required_gems }
                };
            });
            res.status(200).json(result);
        } catch (error) {
            console.error("API Error on /api/withdrawal:", error);
            res.status(500).json({ error: '‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶è‡¶∞‡¶∞' });
        }
    });

    app.get("/api/leaderboard", async (req, res) => {
        try {
            const doc = await db.collection('leaderboard').doc('top_players').get();
            if (doc.exists) {
                return res.status(200).json(doc.data());
            }
            return res.status(200).json({ players: [] });
        } catch (error) {
            console.error("API Error on /api/leaderboard:", error);
            return res.status(500).json({ error: "‡¶≤‡¶ø‡¶°‡¶æ‡¶∞‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø" });
        }
    });


    // --- ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ö-‡¶Ö‡¶≤ ‡¶∞‡ßÅ‡¶ü: ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡ßá index.html ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ---
    // ‡¶è‡¶ü‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßá ‡¶Ø‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡ßá ‡¶ó‡ßá‡¶≤‡ßá‡¶ì ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶ø‡¶ô‡ßç‡¶ó‡ßá‡¶≤-‡¶™‡ßá‡¶ú ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶ü‡¶ø ‡¶≤‡ßã‡¶° ‡¶π‡¶¨‡ßá‡•§
    app.get('*', (req, res) => {
        res.sendFile(path.join(__dirname, 'static', 'index.html'));
    });

    // --- Telegram Bot ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ---
    const bot = new Telegraf(BOT_TOKEN);

    bot.start(async (ctx) => {
        const user = ctx.from;
        const userId = String(user.id);
        const username = user.username || user.first_name;
        // ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø (t.me/bot?start=ref_id)
        const referrerId = ctx.startPayload && /^\d+$/.test(ctx.startPayload) ? ctx.startPayload : null;

        try {
            const userDoc = await getUserRef(userId).get();
            if (!userDoc.exists) {
                await createNewUser(userId, username, referrerId);
                if (referrerId && referrerId !== userId) {
                    const referrerRef = getUserRef(referrerId);
                    await referrerRef.update({
                        balance: admin.firestore.FieldValue.increment(25.0),
                        unclaimedGems: admin.firestore.FieldValue.increment(2),
                        refs: admin.firestore.FieldValue.increment(1)
                    });
                    await ctx.telegram.sendMessage(referrerId, `üéâ ‡¶Ö‡¶≠‡¶ø‡¶®‡¶®‡ßç‡¶¶‡¶®! ${user.first_name} ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶™‡¶®‡¶ø 25 TK ‡¶è‡¶¨‡¶Ç 2 Gems ‡¶™‡ßá‡ßü‡ßá‡¶õ‡ßá‡¶®!`);
                }
            }
        } catch (error) {
            console.error("Start command error:", error);
        }

        const keyboard = Markup.inlineKeyboard([
            Markup.button.webApp("üöÄ Open HubCoin Miner", FRONTEND_URL)
        ]);

        await ctx.replyWithHTML(
            `üëã ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ, <b>${user.first_name}</b>! ‡¶â‡¶™‡¶æ‡¶∞‡ßç‡¶ú‡¶® ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶§‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§`,
            keyboard
        );
    });
    
    // ... ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶¨‡¶ü ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶ó‡ßÅ‡¶≤‡ßã (‡¶Ø‡ßá‡¶Æ‡¶® updateleaderboard) ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶® ...

    // ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ
    bot.launch();
    console.log("‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡ßü‡ßá‡¶õ‡ßá!");

    // Express ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ
    app.listen(PORT, () => {
        console.log(`‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶™‡ßã‡¶∞‡ßç‡¶ü ${PORT}-‡¶è ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡ßü‡ßá‡¶õ‡ßá`);
    });

} catch (e) {
    console.error("‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™ ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡ßü‡ßá‡¶õ‡ßá:", e);
    process.exit(1);
}